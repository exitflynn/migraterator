name: 'Migraterator'
description: 'analyse infrastructure changes in PRs and provide migration guidance'
author: 'Your Name'
branding:
  icon: 'alert-triangle'  # Choose from: https://feathericons.com/
  color: 'blue'  # Choose from: white, yellow, blue, green, orange, red, purple, or gray-dark

inputs:
  github_token:
    description: 'GitHub token for API access'
    required: true
    default: ${{ github.token }}
  llm_api_key:
    description: 'API key for the LLM service (OpenAI or Gemini)'
    required: true
  llm_provider:
    description: 'LLM provider to use (openai or gemini)'
    required: false
    default: 'openai'
  llm_model:
    description: 'Model to use for the selected provider'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ${{ github.action_path }}/requirements.txt
      shell: bash
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '1.0.0'
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'
    
    - name: Run Migraterator
      run: python ${{ github.action_path }}/src/main.py
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        REPO_NAME: ${{ github.repository }}
        LLM_API_KEY: ${{ inputs.llm_api_key }}
        LLM_PROVIDER: ${{ inputs.llm_provider }}
        LLM_MODEL: ${{ inputs.llm_model }}
    
    - name: Comment on PR
      uses: actions/github-script@v6
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const fs = require('fs');
          const reportPath = 'migration_report.md';
          
          if (fs.existsSync(reportPath)) {
            const reportContent = fs.readFileSync(reportPath, 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: reportContent
            });
          } else {
            console.error('Migration report file not found');
          } 